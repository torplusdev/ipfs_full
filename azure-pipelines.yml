# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- pp_master

strategy:
  matrix: 
    linux:
      poolName: 'Ubuntu_Pool'
      vmImage:
      osName: 'linux'
      ext: ''
      addldflags: ''
    windows:
      poolName: 'Windows_Pool'
      vmImage:
      osName: 'windows'
      ext: ".exe"
      addldflags: '-ldflags -H=windowsgui'
    mac:
      poolName: 'Azure Pipelines'
      vmImage: 'macOS-10.14'
      osName: 'mac'
      ext: ''
      addldflags: ''

pool:
  name: $(poolName)
  vmImage: $(vmImage)

steps:
- task: InstallSSHKey@0
  inputs:
    knownHostsEntry: 'github.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ=='
    sshPublicKey: 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDbFMfrNTVm6C6h03KPSO5QSdvkGpGVSZ5wvbklVJtB3XuhKb7urQYIp7zn/av5uRisJvpYJ3BWGXOfINHXPm/phBBXBR3zPFF6QZYqxFy50LVqeVPBUJpoxY+/SdipQFAs3CCTckVeQYmu3DDfuRVUMGJPljIeI2yqT8d1P3DuzmduCo+HwvBTQu6vOUaAiGLyAez4AnJqY+hFdub4RbUJq+7FrFlO02f+xDM8ZwEZqZ9grAJSpe/TiMgFDr2FNPwi5ZoTnF9Zztlsrir3foSafO61kEPGn/iajgDUrdLcKpw1oeDqLj+bijP8YVbUjoW7/GMTPOI7zPyirBqsokI62mPNsn5uGmoNR5IUd7SjZveB5bI/hWVVn47JOrxW1Csybu/TblMSRpFtmXNRpBoHiG6dBqTNiIeI1KK8+UTvw7vBVLGMnpvjKZDtC3DnRA493TVecU5/TQOdBNObGtGaJdNBhAagTj2eZfRxjBC3iywymvQZozsDJz/bFIefRV8= alex@alex-VB'
    sshKeySecureFile: '-----BEGIN OPENSSH PRIVATE KEY----- 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 -----END OPENSSH PRIVATE KEY-----'
  displayName: "Create SSH files"
  condition: eq(variables.osName, 'mac')

- checkout: self 
  clean: true
  submodules: recursive
  displayName: 'Fetching all the changes'

- script: |
    go build -v $(addldflags)
  workingDirectory: $(Build.SourcesDirectory)/go-ipfs/cmd/ipfs
  displayName: 'Building Go Ipfs'

- task: ArchiveFiles@2
  inputs:
    rootFolderOrFile: '$(Build.SourcesDirectory)/go-ipfs/cmd/ipfs/ipfs$(ext)'
    includeRootFolder: true
    archiveType: '7z'
    sevenZipCompression: 'ultra'
    archiveFile: '$(Build.ArtifactStagingDirectory)/ipfs-$(osName)-$(Build.BuildId).7z'
    replaceExistingArchive: true
    verbose: true

- task: ArchiveFiles@2
  inputs:
    rootFolderOrFile: '$(Build.SourcesDirectory)/go-ipfs/cmd/ipfs/ipfs$(ext)'
    includeRootFolder: true
    archiveType: '7z'
    sevenZipCompression: 'ultra'
    archiveFile: '$(Build.ArtifactStagingDirectory)/ipfs-$(osName)-latest.7z'
    replaceExistingArchive: true
    verbose: true

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'ipfs'
    publishLocation: 'Container'